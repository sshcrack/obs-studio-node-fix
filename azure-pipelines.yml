trigger:
  branches:
    include:
      - staging
  tags:
    include:
      - '*'

variables:
  RuntimeURL: https://artifacts.electronjs.org/headers/dist
  RuntimeName: iojs
  ElectronVersion: 22.3.3
  SLBuildDirectory: streamlabs-build
  SLGenerator: Visual Studio 16 2019
  SLDistributeDirectory: distribute
  SLFullDistributePath: $(SLBuildDirectory)\$(SLDistributeDirectory)
  LibOBSVersion: 28.2.50

jobs:
- job: 'WindowsRelease'
  pool: 'Default'
  workspace:
    clean: all
  variables:
    ReleaseName: release
  steps:
  - powershell: |
      Write-Host "##vso[task.setvariable variable=tagartifact]osn-$((git.exe describe --tags --abbrev=0) | Out-String)"
      'yarn install'
    displayName: 'Install dependencies'

  - script: 'yarn add electron@%ElectronVersion% -D'
    displayName: 'Install Electron'

  - script: 'git submodule update --init --recursive'
    displayName: 'Update submodules'

  - script: ./ci/configure-osn.cmd
    displayName: 'Configure obs-studio-node'

  - script: 'node ci/bump-version.js'
    displayName: 'Bump version number'
    condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'tags'))

  - script: ./ci/build-osn.cmd
    displayName: 'Build obs-studio-node'

  - script: 'yarn run test'
    env:
      SLOBS_BE_STREAMKEY: $(testsStreamKey)
      SLOBS_TEST_USER_POOL_TOKEN: $(userPoolToken)
      OSN_ACCESS_KEY_ID: $(awsAccessKeyId)
      OSN_SECRET_ACCESS_KEY: $(awsSecretAccessKey)
      RELEASE_NAME: $(ReleaseName)
    continueOnError: true
    displayName: 'Run tests'

  - script: 'git clone https://github.com/stream-labs/symsrv-scripts.git'
    displayName: 'Fetch symsrv-scripts'
    condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'tags'))

  - script: ./symsrv-scripts/main.bat "%CD%/symsrv-scripts" ".\main.ps1 -pdbPaths '%CD%\$(SLBuildDirectory)\lib-streamlabs-ipc,%CD%\$(SLBuildDirectory)\obs-studio-client,%CD%\$(SLBuildDirectory)\obs-studio-server' -localSourceDir '%CD%' -repo_userId 'stream-labs' -repo_name 'obs-studio-node' -repo_branch '$(Build.SourceVersion)' -subModules 'lib-streamlabs-ipc,stream-labs,lib-streamlabs-ipc,streamlabs'"
    displayName: 'Run symbol server scripts'
    condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'tags'))
    env:
      AWS_SYMB_ACCESS_KEY_ID: $(AWS_SYMB_ACCESS_KEY_ID)
      AWS_SYMB_SECRET_ACCESS_KEY: $(AWS_SYMB_SECRET_ACCESS_KEY)

  - script: ./ci/copy-files.cmd
    displayName: 'Copy necessary dll files'

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: $(SLFullDistributePath)\obs-studio-node
      includeRootFolder: true
      archiveType: tar
      tarCompression: gz
      archiveFile: '$(SLFullDistributePath)\$(tagartifact)-release-win64.tar.gz'
    displayName: 'Generate build artifact'

  - task: PublishBuildArtifacts@1
    inputs: 
      pathtoPublish: $(SLFullDistributePath)\$(tagartifact)-release-win64.tar.gz
      artifactName: $(tagartifact)-release-win64.tar.gz
    displayName: 'Publish build artifact'

  - script: ./ci/prepare-artifact.cmd
    displayName: 'Prepare tag artifact'
    condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'tags'))

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: $(SLFullDistributePath)\obs-studio-node
      includeRootFolder: true
      archiveType: tar
      tarCompression: gz
      archiveFile: '$(tagartifact)-release-win64.tar.gz'
    displayName: 'Generate tag artifact'
    condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'tags'))

  - task: PublishBuildArtifacts@1
    inputs: 
      pathtoPublish: $(Build.SourcesDirectory)\$(tagartifact)-release-win64.tar.gz
      artifactName: '$(tagartifact)-release-win64.tar.gz'
    displayName: 'Publish tag artifact'
    condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'tags'))

  - powershell: |
      mkdir syms
      mkdir syms\ascii
      mkdir syms\ascii\client
      .\ci\run-sentry-cli-azure.ps1
    env:
      RootDirectory: $(Build.SourcesDirectory)
      PDBPath: $(Build.SourcesDirectory)\$(SLFullDistributePath)
    errorActionPreference: silentlyContinue
    ignoreLASTEXITCODE: true
    displayName: 'Prepare pdbs to Sentry'
    condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'tags'))
  
  - script: 'sentry-cli.exe upload-dif --log-level DEBUG --org streamlabs-desktop --project obs-server %BUILD_SOURCESDIRECTORY%\syms\ascii'
    env:
      SENTRY_AUTH_TOKEN: $(sentryAuth)
    displayName: 'Upload obs-server pdbs'
    condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'tags'))

  - script: '.\sentry-cli.exe upload-dif --log-level DEBUG --org streamlabs-desktop --project obs-server-preview %BUILD_SOURCESDIRECTORY%\syms\ascii'
    env:
      SENTRY_AUTH_TOKEN: $(sentryAuth)
    displayName: 'Upload obs-server-preview pdbs'
    condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'tags'))

  - script: '.\sentry-cli.exe upload-dif --log-level DEBUG --org streamlabs-desktop --project obs-client %BUILD_SOURCESDIRECTORY%\syms\ascii'
    env:
      SENTRY_AUTH_TOKEN: $(sentryAuth)
    displayName: 'Upload obs-client pdbs'
    condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'tags'))

  - task: S3Upload@1
    inputs:
      awsCredentials: 'Streamlabs AWS'
      regionName: 'us-west-2'
      bucketName: 'obsstudionodes3.streamlabs.com'
      globExpressions: '$(tagartifact)-release-win64.tar.gz'
      filesAcl: 'public-read'
    displayName: 'Upload tag artifact to S3'
    condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'tags'))

- job: 'WindowsDebug'
  pool: 'Default'
  workspace:
    clean: all
  variables:
    ReleaseName: debug
  steps:
  - powershell: |
      Write-Host "##vso[task.setvariable variable=tagartifact]osn-$((git.exe describe --tags --abbrev=0) | Out-String)"
      'yarn install'
    displayName: 'Install dependencies'

  - script: 'yarn add electron@%ElectronVersion% -D'
    displayName: 'Install Electron'

  - script: 'git submodule update --init --recursive'
    displayName: 'Update submodules'

  - script: ./ci/configure-osn.cmd
    displayName: 'Configure obs-studio-node'

  - script: 'node ci/bump-version.js'
    displayName: 'Bump version number'
    condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'tags'))

  - script: ./ci/build-osn.cmd
    displayName: 'Build obs-studio-node'

  - script: 'yarn run test'
    env:
      SLOBS_BE_STREAMKEY: $(testsStreamKey)
      SLOBS_TEST_USER_POOL_TOKEN: $(userPoolToken)
      OSN_ACCESS_KEY_ID: $(awsAccessKeyId)
      OSN_SECRET_ACCESS_KEY: $(awsSecretAccessKey)
      RELEASE_NAME: $(ReleaseName)
    continueOnError: true
    displayName: 'Run tests'

  - script: ./ci/copy-files.cmd
    displayName: 'Copy necessary dll files'

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: $(SLFullDistributePath)\obs-studio-node
      includeRootFolder: true
      archiveType: tar
      tarCompression: gz
      archiveFile: '$(SLFullDistributePath)\$(tagartifact)-debug-win64.tar.gz'
    displayName: 'Generate build artifact'

  - task: PublishBuildArtifacts@1
    inputs: 
      pathtoPublish: $(SLFullDistributePath)\$(tagartifact)-debug-win64.tar.gz
      artifactName: $(tagartifact)-debug-win64.tar.gz
    displayName: 'Publish build artifact'

  - script: ./ci/prepare-artifact.cmd
    displayName: 'Prepare tag artifact'
    condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'tags'))

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: $(SLFullDistributePath)\obs-studio-node
      includeRootFolder: true
      archiveType: tar
      tarCompression: gz
      archiveFile: $(tagartifact)-debug-win64.tar.gz
    displayName: 'Generate tag artifact'
    condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'tags'))

  - task: PublishBuildArtifacts@1
    inputs: 
      pathtoPublish: $(Build.SourcesDirectory)\$(tagartifact)-debug-win64.tar.gz
      artifactName: $(tagartifact)-debug-win64.tar.gz
    displayName: 'Publish tag artifact'
    condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'tags'))

  - task: S3Upload@1
    inputs:
      awsCredentials: 'Streamlabs AWS'
      regionName: 'us-west-2'
      bucketName: 'obsstudionodes3.streamlabs.com'
      globExpressions: '$(tagartifact)-debug-win64.tar.gz'
      filesAcl: 'public-read'
    displayName: 'Upload tag artifact to S3'
    condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'tags'))

- job: 'MacOSX'
  pool:
    vmImage: 'macOS-11'

  strategy:
    matrix:
      Release-x86_64:
        BuildConfig: RelWithDebInfo
        ReleaseName: release
        Architecture: x86_64
      Debug-x86_64:
        BuildConfig: Debug
        ReleaseName: debug
        Architecture: x86_64
      Release-arm64:
        BuildConfig: RelWithDebInfo
        ReleaseName: release
        Architecture: arm64
      Debug-arm64:
        BuildConfig: Debug
        ReleaseName: debug
        Architecture: arm64
  steps:
  - powershell: Write-Host "##vso[task.setvariable variable=tagartifact]osn-$((git describe --tags --abbrev=0) | Out-String)"
    displayName: 'Get current tag'

  - script: './ci/install-dependencies-osx.sh'
    displayName: 'Install dependencies'

  - script: 'git submodule update --init --recursive'
    displayName: 'Update submodules'

  - script: './ci/configure-osn-osx.sh'
    env:
      ARCHITECTURE: $(Architecture)
    displayName: 'Configure obs-studio-node'

  - script: 'node ci/bump-version.js'
    displayName: 'Bump version number'
    condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'tags'))

  - script: ./ci/build-osn-osx.sh
    env:
      SENTRY_AUTH_TOKEN: $(sentryAuth)
    displayName: 'Build obs-studio-node'      

  - script: 'yarn run test'
    env:
      SLOBS_BE_STREAMKEY: $(testsStreamKey)
      SLOBS_TEST_USER_POOL_TOKEN: $(userPoolToken)
      OSN_ACCESS_KEY_ID: $(awsAccessKeyId)
      OSN_SECRET_ACCESS_KEY: $(awsSecretAccessKey)
      RELEASE_NAME: $(ReleaseName)
    continueOnError: true
    displayName: 'Run tests'

  - script: 'python ./ci/sentry-osx.py'
    env:
      SENTRY_AUTH_TOKEN: $(sentryAuth)
    displayName: 'Upload debug files to Sentry'

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: $(SLBuildDirectory)/$(SLDistributeDirectory)/obs-studio-node
      includeRootFolder: true
      archiveType: tar
      tarCompression: gz
      archiveFile: '$(SLBuildDirectory)/$(SLDistributeDirectory)/$(tagartifact)-$(ReleaseName)-osx-$(Architecture).tar.gz'
    displayName: 'Generate build artifact'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(SLBuildDirectory)/$(SLDistributeDirectory)/$(tagartifact)-$(ReleaseName)-osx-$(Architecture).tar.gz
      artifactName: $(tagartifact)-$(ReleaseName)-osx-$(Architecture).tar.gz
    displayName: 'Publish build artifact'

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: $(SLBuildDirectory)/$(SLDistributeDirectory)/obs-studio-node
      includeRootFolder: true
      archiveType: tar
      tarCompression: gz
      archiveFile: '$(tagartifact)-$(ReleaseName)-osx-$(Architecture).tar.gz'
      condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'tags'))
    displayName: 'Generate tag artifact'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.SourcesDirectory)/$(tagartifact)-$(ReleaseName)-osx-$(Architecture).tar.gz
      artifactName: $(tagartifact)-$(ReleaseName)-osx-$(Architecture).tar.gz
    displayName: 'Publish tag artifact'
    condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'tags'))

  - task: S3Upload@1
    inputs:
      awsCredentials: 'Streamlabs AWS'
      regionName: 'us-west-2'
      bucketName: 'obsstudionodes3.streamlabs.com'
      globExpressions: '$(tagartifact)-$(ReleaseName)-osx-$(Architecture).tar.gz'
      filesAcl: 'public-read'
    displayName: 'Upload tag artifact to S3'
    condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'tags'))
